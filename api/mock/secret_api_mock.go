// Code generated by MockGen. DO NOT EDIT.
// Source: secret_api_wrapper.go

// Package mock_mocks is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	mocks "github.com/jwendel/smcache/api"
	secretmanager "google.golang.org/genproto/googleapis/cloud/secretmanager/v1beta1"
)

// MockClientFactory is a mock of ClientFactory interface
type MockClientFactory struct {
	ctrl     *gomock.Controller
	recorder *MockClientFactoryMockRecorder
}

// MockClientFactoryMockRecorder is the mock recorder for MockClientFactory
type MockClientFactoryMockRecorder struct {
	mock *MockClientFactory
}

// NewMockClientFactory creates a new mock instance
func NewMockClientFactory(ctrl *gomock.Controller) *MockClientFactory {
	mock := &MockClientFactory{ctrl: ctrl}
	mock.recorder = &MockClientFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClientFactory) EXPECT() *MockClientFactoryMockRecorder {
	return m.recorder
}

// NewSecretClient mocks base method
func (m *MockClientFactory) NewSecretClient(ctx context.Context) (mocks.SecretClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSecretClient", ctx)
	ret0, _ := ret[0].(mocks.SecretClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewSecretClient indicates an expected call of NewSecretClient
func (mr *MockClientFactoryMockRecorder) NewSecretClient(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSecretClient", reflect.TypeOf((*MockClientFactory)(nil).NewSecretClient), ctx)
}

// MockSecretClient is a mock of SecretClient interface
type MockSecretClient struct {
	ctrl     *gomock.Controller
	recorder *MockSecretClientMockRecorder
}

// MockSecretClientMockRecorder is the mock recorder for MockSecretClient
type MockSecretClientMockRecorder struct {
	mock *MockSecretClient
}

// NewMockSecretClient creates a new mock instance
func NewMockSecretClient(ctrl *gomock.Controller) *MockSecretClient {
	mock := &MockSecretClient{ctrl: ctrl}
	mock.recorder = &MockSecretClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSecretClient) EXPECT() *MockSecretClientMockRecorder {
	return m.recorder
}

// AccessSecretVersion mocks base method
func (m *MockSecretClient) AccessSecretVersion(req *secretmanager.AccessSecretVersionRequest) (*secretmanager.AccessSecretVersionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccessSecretVersion", req)
	ret0, _ := ret[0].(*secretmanager.AccessSecretVersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccessSecretVersion indicates an expected call of AccessSecretVersion
func (mr *MockSecretClientMockRecorder) AccessSecretVersion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccessSecretVersion", reflect.TypeOf((*MockSecretClient)(nil).AccessSecretVersion), req)
}

// ListSecretVersions mocks base method
func (m *MockSecretClient) ListSecretVersions(req *secretmanager.ListSecretVersionsRequest) mocks.SecretListIterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecretVersions", req)
	ret0, _ := ret[0].(mocks.SecretListIterator)
	return ret0
}

// ListSecretVersions indicates an expected call of ListSecretVersions
func (mr *MockSecretClientMockRecorder) ListSecretVersions(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecretVersions", reflect.TypeOf((*MockSecretClient)(nil).ListSecretVersions), req)
}

// DestroySecretVersion mocks base method
func (m *MockSecretClient) DestroySecretVersion(req *secretmanager.DestroySecretVersionRequest) (*secretmanager.SecretVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroySecretVersion", req)
	ret0, _ := ret[0].(*secretmanager.SecretVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DestroySecretVersion indicates an expected call of DestroySecretVersion
func (mr *MockSecretClientMockRecorder) DestroySecretVersion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroySecretVersion", reflect.TypeOf((*MockSecretClient)(nil).DestroySecretVersion), req)
}

// CreateSecret mocks base method
func (m *MockSecretClient) CreateSecret(req *secretmanager.CreateSecretRequest) (*secretmanager.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecret", req)
	ret0, _ := ret[0].(*secretmanager.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecret indicates an expected call of CreateSecret
func (mr *MockSecretClientMockRecorder) CreateSecret(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecret", reflect.TypeOf((*MockSecretClient)(nil).CreateSecret), req)
}

// AddSecretVersion mocks base method
func (m *MockSecretClient) AddSecretVersion(req *secretmanager.AddSecretVersionRequest) (*secretmanager.SecretVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSecretVersion", req)
	ret0, _ := ret[0].(*secretmanager.SecretVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSecretVersion indicates an expected call of AddSecretVersion
func (mr *MockSecretClientMockRecorder) AddSecretVersion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSecretVersion", reflect.TypeOf((*MockSecretClient)(nil).AddSecretVersion), req)
}

// DeleteSecret mocks base method
func (m *MockSecretClient) DeleteSecret(req *secretmanager.DeleteSecretRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecret", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecret indicates an expected call of DeleteSecret
func (mr *MockSecretClientMockRecorder) DeleteSecret(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecret", reflect.TypeOf((*MockSecretClient)(nil).DeleteSecret), req)
}

// MockSecretListIterator is a mock of SecretListIterator interface
type MockSecretListIterator struct {
	ctrl     *gomock.Controller
	recorder *MockSecretListIteratorMockRecorder
}

// MockSecretListIteratorMockRecorder is the mock recorder for MockSecretListIterator
type MockSecretListIteratorMockRecorder struct {
	mock *MockSecretListIterator
}

// NewMockSecretListIterator creates a new mock instance
func NewMockSecretListIterator(ctrl *gomock.Controller) *MockSecretListIterator {
	mock := &MockSecretListIterator{ctrl: ctrl}
	mock.recorder = &MockSecretListIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSecretListIterator) EXPECT() *MockSecretListIteratorMockRecorder {
	return m.recorder
}

// Next mocks base method
func (m *MockSecretListIterator) Next() (*secretmanager.SecretVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(*secretmanager.SecretVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next
func (mr *MockSecretListIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockSecretListIterator)(nil).Next))
}
